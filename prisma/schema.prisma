generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Exercise {
  id          String   @id @default(cuid())
  name        String
  description String?
  category    String?  // e.g., "chest", "legs", "back"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  progressionSettings ProgressionSettings?
  workoutLogs         WorkoutLog[]

  @@index([name])
}

model ProgressionSettings {
  id              String   @id @default(cuid())
  exerciseId      String   @unique
  exercise        Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  
  // Current stats
  currentWeight   Float    // in pounds
  currentReps     Int      @default(10)
  currentSets     Int      @default(3)
  
  // Progression settings
  progressionType String   @default("linear") // "linear", "exponential", "percentage"
  growthRate      Float    @default(5.0)      // amount or percentage to increase
  frequency       String   @default("per_workout") // "per_workout", "per_rotation", "weekly", "bi_weekly"
  
  // Metadata
  lastUpdated     DateTime @updatedAt
  createdAt       DateTime @default(now())
}

model WorkoutSession {
  id          String   @id @default(cuid())
  date        DateTime @default(now())
  notes       String?
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  
  workoutLogs WorkoutLog[]

  @@index([date])
}

model WorkoutLog {
  id        String          @id @default(cuid())
  sessionId String
  session   WorkoutSession  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  exerciseId String
  exercise   Exercise       @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  
  // What was actually performed
  weight    Float
  reps      Int
  sets      Int
  completed Boolean        @default(true)
  notes     String?
  
  createdAt DateTime       @default(now())

  @@index([sessionId])
  @@index([exerciseId])
}

// === NEW ROTATION-BASED WORKOUT SYSTEM ===

model WorkoutRotation {
  id              String          @id @default(cuid())
  name            String          @default("My Rotation")
  currentDayIndex Int             @default(0)      // Which day user is currently on (0-based)
  lastWorkoutDate DateTime?                        // Track when last workout was completed
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  days            RotationDay[]
  priorityRules   PriorityRules?
  growthSettings  GrowthSettings?
}

model RotationDay {
  id          String          @id @default(cuid())
  rotationId  String
  rotation    WorkoutRotation @relation(fields: [rotationId], references: [id], onDelete: Cascade)
  dayNumber   Int                                  // 1, 2, 3, etc.
  name        String          @default("Day")      // "Day 1", "Push Day", etc.
  order       Int                                  // For custom ordering
  
  exercises   DayExercise[]
  
  @@unique([rotationId, dayNumber])
  @@index([rotationId])
}

model DayExercise {
  id          String      @id @default(cuid())
  dayId       String
  day         RotationDay @relation(fields: [dayId], references: [id], onDelete: Cascade)
  
  // Exercise details
  name        String                               // Exercise name
  weight      Float                                // Current weight in lbs
  reps        Int                                  // Current reps
  sets        Int                                  // Current sets
  partialReps Int         @default(0)              // Partial set reps (e.g., +1 rep for weird numbers)
  
  order       Int                                  // Order within the day
  completed   Boolean     @default(false)          // Checkmark status for today
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  @@index([dayId])
}

model PriorityRules {
  id          String          @id @default(cuid())
  rotationId  String          @unique
  rotation    WorkoutRotation @relation(fields: [rotationId], references: [id], onDelete: Cascade)
  
  // Priority order (1 = highest priority, 3 = lowest, partial sets always 4)
  repPriority     Int     @default(1)
  setPriority     Int     @default(2)
  weightPriority  Int     @default(3)
  // Partial sets are always last priority (hardcoded as 4)
  
  // Constraints
  repMax      Int     @default(15)
  repMin      Int     @default(8)
  setMax      Int     @default(5)
  setMin      Int     @default(3)
  
  repsToSetsMultiplier Float @default(2.0)         // Reps must be > (X * Sets)
  weightRange          Float @default(10.0)        // Weight changes must be within Â±X lbs
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model GrowthSettings {
  id          String          @id @default(cuid())
  rotationId  String          @unique
  rotation    WorkoutRotation @relation(fields: [rotationId], references: [id], onDelete: Cascade)
  
  growthType  String   @default("percent")         // "linear", "percent", "sigmoid"
  amount      Float    @default(5.0)               // 5 lbs (linear) or 5% (percent)
  frequency   String   @default("rotation")        // "day" (every workout), "rotation" (after full cycle), "week"
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
